\S                                                                                                                              Written by:      Alan J.M.Wenham                                                 28 Pine Wood                                                    Sunbury-on-Thames                                               Middx   TW16 6SG                                                United Kingdom                                                  Tel: 01932 786440                                               Email: 101745.3615@compuserve.com                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \S Dr Ting's floating point.                          AJMW Nov97                                                                Described in Forth Dimensions Jan/Feb1997, pg 15                                                                                Uses R.L.Smith's short label extension set out in Scr # 20-24                                                                   Written for F-PC assembler but adapted by AJMW for F83.         There seems to have been several typographical errors           in Dr Ting's code as published but I have corrected these.                                                                      Additional notes appear in Scr # 17 et seq                                                                                      Scr # 2 is the load screen                                      There are some quirks in FSAVE, FRSTOR, FINIT, and FDUMP as     detailed in the additional notes. I have left the code in blocks15 and 16 but commented them out.                               \ Load block                                          AJMW Nov97                                                                20 24 thru \ Short labels extension                             .( Labels extension loaded)   CR                                                                                                                                                                                                                                3 16 thru                                                       .( Floating point routine loadedov97                                                                CLEAR_LABELS                                                    : [ASSEMBLER] ASSEMBLER ; IMMEDIATE                                                                                                                                                             CREATE FBUFFER 104 ALLOT                                        2VARIABLE DTEMP                                                                                                                                                                                 : FPU (S b1 b2 -- ) \ Defining word to create FPU code words      [ASSEMBLER] CODE SWAP C, C, NEXT END-CODE ;                                                                                                                                                                                                                                                                                   \ FPU words                                           AJMW Nov97HEX                                                             D9 E0 FPU FCHS (S F: r -- -r ) \ Change sign                    D9 E1 FPU FABS (S F: r -- |r| ) \ Absolute value                D9 EE FPU FLDZ (S F: -- 0.0 ) \ Load 0.0                        D9 E8 FPU FLD1 (S F: -- 1.0 ) \ Load 1.0                        D9 E9 FPU FLDL2T (S F: -- log10b2  ) \ Load log(10) base 2      D9 EA FPU FLDL2E (S F: -- log eb2 ) \ Load log(e) base 2        D9 EB FPU FLDPI (S F: -- pi ) \ Load pi                         D9 EC FPU FLDLG2 (S F: -- log2b10  ) \ Load log(2) base 10      DECIMAL 217 237 FPU FLDLN2 (S F: -- log2be  ) \ Load ln(2)      HEX                                                             D9 FA FPU FSQRT (S F: r -- sqrt r  ) \ Square root                                                                              DECIMAL                                                                                                                         \ FPU words cont.                                     AJMW Nov97HEX                                                             DE C1 FPU F+                 D9 C9 FPU FSWAP                    DE C9 FPU F*                 D9 C1 FPU FOVER                    DE E9 FPU F-                 D9 FF FPU FCOS                     DE CE FPU F-R                D9 FE FPU FSIN                     DE F9 FPU F/                 D9 FB FPU FSINCOS                  DE F1 FPU F/R ( reverse div) D9 F2 FPU FPTAN                    D9 C0 FPU FDUP               D9 F3 FPU FPATAN                   DD D8 FPU FDROP              D9 FD FPU FSCALE                   DB E3 FPU (FINIT) ( hardware initialisation, FP stack set to    NaN's )                                                         9B 9B FPU FWAIT ( Twice ! )                                                                                                                                                                     DECIMAL                                                         \ F0<                                                 AJMW Nov97HEX                                                                                                                             CODE F0< (S f: f -- flag )                                           D9 C, E4 C, \ FTST                                              DF C, E0 C, \ FSTSW AX                                          4700 # AX AND \ get condition                                   100 # AX CMP              \ F0< ?                               1 LB    JE                                                      AX AX XOR                                                       AX PUSH NEXT                                                1 LB: -1 # AX MOV                                                   AX PUSH NEXT                                               END-CODE                                                                                                                        DECIMAL                                                         \ F<                                                  AJMW Nov97HEX                                                             CODE F< (S F: f1 f2 --- flag) \ I think!                             D8 C, D1 C, \ FCOM ST(1)                                        DF C, E0 C, \ FSTSW AX                                          4700 # AX AND \ Get condition                                   100 # AX CMP \ F< ?                                             2 LB  JE                                                                                                                        AX AX XOR                                                       AX PUSH NEXT                                                2 LB: -1 # AX MOV AX PUSH NEXT                                                                                                 END-CODE                                                                                                                        DECIMAL                                                         \   F?                                                AJMW Nov97HEX                                                             CODE F?  \ Returns 1024d if a valid FP# on FP stack.                 D9 C, E5 C, \ FXAM                                              DF C, E0 C, \ FSTW AX                                           4500 # AX AND \ get C3, C2, C0                                  AX PUSH                                                         NEXT                                                       END-CODE                                                                                                                                                                                                                                                                                                                                                                                        DECIMAL                                                                                                                         \ F0=                                                 AJMW Nov97HEX                                                             CODE F0= (S F: f -- flag ) \ I think!                                D9 C, E4 C, \ FTST                                              DF C, E0 C, \ FSTSW AX                                          4700 # AX AND \ get condition                                   4000 # AX CMP \ F0= ?                                           4 LB JE                                                         AX AX XOR                                                       AX PUSH NEXT                                                4 LB: -1 # AX MOV                                                                                                                   AX PUSH NEXT                                               END-CODE                                                                                                                        DECIMAL                                                         \ F@, F!                                              AJMW Nov97HEX                                                             CODE F@ (S F: a -- f ) \ Intel temp-real 80 bits                     BX POP                                                          DB C, 2F C, \ FLD TBYTE PTR [BX]                                NEXT                                                       END-CODE                                                                                                                        CODE F! (S          ) \ Intel temp-real 80 bits                      BX POP                                                          DB C, 3F C, \ FSTP TBYTE PTR [BX]                               NEXT                                                       END-CODE                                                                                                                                                                                                                                                        \ (D>F)                                               AJMW Nov97HEX                                                             CODE (D>F) (S F:   -- F)                                             DB C, 06 C, \ FILD DWORD PTR ( long integer )                   DTEMP ,                                                         NEXT                                                       END-CODE                                                                                                                        : D>F                                                             SWAP \ reorder bytes                                            DTEMP 2! (D>F) ;                                                                                                                                                                                                                                                                                                              DECIMAL                                                         \ (F>D), F>D                                          AJMW Nov97HEX                                                             CODE (F>D) (S F:          )                                          DB C, 16 C, \ FIST DWORD PTR ( long integer )                   DTEMP ,                                                         NEXT                                                       END-CODE                                                                                                                        : F>D                                                             (F>D) DTEMP 2@ SWAP ;                                                                                                                                                                                                                                                                                                                                                                         DECIMAL                                                         \ Float input/output                                  AJMW Nov97                                                                VARIABLE FSIGN VARIABLE FEXPONENT VARIABLE FDIGITS                                                                              : PRECISION FDIGITS @ ; : SET-PRECISION FDIGITS ! ;                                                                             8 SET-PRECISION                                                                                                                 : JUSTIFY                                                         F0< IF FABS -1 ELSE 0 THEN FSIGN ! 0 FEXPONENT !                F< IF BEGIN FOVER F* F< WHILE -1 FEXPONENT +! REPEAT            FOVER F/ ELSE BEGIN FOVER F/ F< 1 FEXPONENT +! UNTIL            THEN ;                                                                                                                                                                                                                                                        \ F., FLT                                             AJMW Nov97                                                                : F. (S F: -- f)                                                                                                                  F0= IF ."  0.0" FDROP EXIT THEN                                 F? 1024 <> IF ." Not floating point " FDROP EXIT THEN           10. D>F FSWAP JUSTIFY FSIGN @ IF ." -" ELSE SPACE THEN          FDIGITS @ 0 DO FOVER F* LOOP                                    F>D <# FDIGITS @ 0 DO # LOOP ASCII . HOLD #S #> TYPE            FEXPONENT @ ?DUP IF ."  E " 1 .R THEN FDROP FDROP ;                                                                           : FLT   (S d -- f ) \ 0.001234, 1234.5678 as input                10. D>F \ base                                                  D>F DPL @ 0 DO FOVER F/ LOOP FSWAP FDROP ;                                                                                                                                                    \S FSAVE, FRSTOR ( Either or both of these are not    AJMW Nov97HEX              ( working as expected )                        CODE FSAVE ( -- )                                                    DD C, 36 C,   \ FSAVE fbuffer                                   FBUFFER , NEXT                                             END-CODE                                                                                                                        CODE FRSTOR ( -- )                                                   DD C, 3E C,   \ FRSTOR fbuffer                                  FBUFFER , NEXT                                             END-CODE                                                                                                                                                                                                                                                                                                                        DECIMAL                                                         \S FDUMP, FINIT ( These are unreliable )              AJMW Nov97                                                                  : FDUMP ( -- ) \ Unreliable                                       FSAVE CR ." Top" CR FBUFFER 14 + 6 0 DO DUP F@ F. CR 10 +                                               LOOP ." Bottom" CR      DROP FRSTOR ;                                                                                                                                                                                                                                                : FINIT       (FINIT)                                             6 0 DO  0.0 FLT LOOP ;                                                                                                                                                                                                                                                                                                                                                                       \S Additional notes                                                                                                             FLDLN2 in Scr #4 is defined in decimal because ED dropped the   system into the Laxen and Perry editor.                                                                                         An extra word F? defined on Scr #8 and used in F. to prevent    the system hanging up if there is not a valid FP# on the FP     stack.                                                                                                                          FSAVE should save the complete state of the FPU. Full details ofthis are given in Microsoft's 80386/80486 Programming Guide but my code may not work properly.                                  FRSTOR should restore the full FPU state but may also be faulty                                                                 (FINIT) completely initialises the FPU and fills the stack with NaN's or nonsense. FINIT works but with loop limited to 6. more/\S Additional notes cont.                             AJMW Nov97                                                                n SET-PRECISION sets the number of decimal places up to a       maximum of 8 consistent with 32 bit use.                                                                                        F. presents results in the form x.yyyyyyyy E z where            x = 1 to 9, y = 0 to 9                                                                                                          Up to 6 #'s can be entered successively with FLT, more than thisgives " Not floating point " error which needs (FINIT) to clear.                                                                FDUMP works partially but I have limited it to 6 FP#'s. In      theory it should be possible to invoke it repeatedly and get thesame result but this appears not to happen. It also seems to    clear FTOS and so should NOT be used when doing real workhort labels in f83 assembler                       AJMW Oct97                                                                \ R.L.Smith in FPC\TOOLS\DMULDIV.SEQ describes an alternative   \ method for using labels in F83 assemblerct97                                                                30 CONSTANT MAXLABELS \ More than enough for me!                HEX CREATE SHORT_LABELS MAXLABELS 4 * ALLOT \ Vector for labels                                                                 : SXBYTE (S -- ) \ Sign extension for a byte                      DUP 80 AND IF FF00 OR THEN ; DECIMAL                                                                                          : CLEAR_LABELS (S -- ) \ Clears the local short labels            SHORT_LABELS MAXLABELS 4 * 0 FILL ;                                                                                           : CHECKLABEL (S n -- m ) \ Argument in right range? If so point   DUP MAXLABELS 1- U>    \ to start of that label information     ABORT" Bad Label " 2* 2* SHORT_LABELS + ;                                                                                     \ LB,LBRESOLVE                                        AJMW Oct97\ RLS uses $ instead of LB but I prefer to reserve $ for strings                                                                : LB (S n1 -- n2 ) \ Argument from 0 to 29. References a label                     \ for relative jumps before and/or after its                    \ definition                                   CHECKLABEL DUP @ IF @ ELSE 2+ DUP @ SWAP HERE 2+ SWAP !         DUP 0= IF HERE 2+ + THEN THEN ;                                                                                               : LBRESOLVE (S linkadr -- ) \ Used to resolve forward refs        @ DUP 0= IF DROP EXIT THEN 0                                    BEGIN + DUP 1- C@ OVER HERE OVER - SWAP 1- C! SXBYTE            DUP 0= UNTIL 2DROP ;                                                                                                                                                                                                                                          \ LB:, CLEAR_LABEL                                    AJMW Nov97                                                                : LB: (S n -- ) \ Defines a local label. n is 0 to 29             CHECKLABEL DUP 2+ LBRESOLVE 0 OVER 2+ ! HERE SWAP ! ;                                                                         : CLEAR_LABEL (S n -- ) \ Clears label n                          CHECKLABEL 4 0 FILL ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         