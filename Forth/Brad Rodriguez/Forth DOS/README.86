         CAMELFORTH FOR THE 8086 - VERSION 1.0 - 24 DECEMBER 1996
         ========================================================

This is an ALPHA TEST version of CamelForth/86, an ANSI Standard Forth
for the Intel 8051 family of microprocessors.  This means that,
although I have tested the bulk of this code for correct functioning,
you ARE LIKELY to discover bugs.  I'd appreciate hearing of any such,
by email, at bj@zetetics.com.

                                 * * *

As distributed, CamelForth will assemble to run under MS-DOS 3.x or
higher.  It will allocate three 64K segments, for code, data, and
headers, plus 200h bytes in a fourth segment for stacks.

To start CamelForth under MS-DOS, type the command

        CAMEL86

This version (1.0) of CamelForth/86 ignores the rest of the command
line, and launches the Forth interpreter directly.  To return to MS-DOS,
use the command

        BYE

Note that CamelForth is CASE SENSITIVE, and all Forth words are in UPPER
CASE.

CamelForth/86 uses the MS-DOS Standard Input and Standard Output.  So,
it is possible to provide keyboard input from a file, e.g.,

        CAMEL86 <script.txt

The last command in the file should be BYE.  (If you forget this, you
will need to use CTRL-BREAK to terminate CamelForth/86.)  You cannot
return to keyboard input after interpreting an input file.  This is
not intended as a way to load source code, but rather as a way to
perform self-contained scripts (such as ANSITEST.TXT, the Hayes
validation suite).

You can also redirect terminal output to a file, e.g.,

        CAMEL86 >log.txt

but since this disables the screen display, it's only useful when
interpreting a script file.  For example, the Hayes validation suite can
be run, and the output saved, with the command

        CAMEL86 <ANSITEST.TXT >ANSITEST.LOG

Because this is a simple redirection of keyboard input, error messages
and prompts (such as "ok") are still output, and (if redirected) will
appear in the log file.


                    MODIFICATION FOR STANDALONE USE

CamelForth can be assembled for a standalone or embedded 8086.
About 6K of PROM (4K code, 2K headers) and 1K of RAM are used by
CamelForth, plus whatever additional PROM and RAM is needed by your
program.

You will need to link CamelForth to your reset vector (or other
startup procedure), and add any required hardware initialization.
You must also add the Forth words KEY KEY? and EMIT for your hardware.
Modify the segment allocation, and the "reset" routine (both in
CAMEL86.ASM), to suit your memory map.

If you are putting CamelForth in PROM, but want to have a Forth
dictionary in RAM (so you can add new definitions), you'll have to
arrange for RAM in BOTH the Code and Extra (headers) segments.  This
will probably require overlapping segments, and is not a trivial
exercise.  You'll need to change the 'headdict' and 'romdict' equates
(at the end of camel86. asm) to the starting RAM addresses for code and
headers.  Do NOT change the lines

        ORG ilatest     ; set "latest" in UINIT data
        DW link

as these point the dictionary list head to the last word defined in the
kernel.

                                 * * *

This program was written using Borland Turbo Assembler.  Every attempt
was made to remain compatible with MASM, but I haven't actually tried
MASM.  (Anyone successfully doing so is invited to contact me!)
Included in this distribution are two batch files; you can assemble
and link the CamelForth source files with the commands

        tasm camel86
        tlink camel86

This will produce CAMEL86.EXE.

                                 * * *

There are TWO WAYS to write embedded programs in CamelForth:

1. If you have CamelForth running on an embedded 8086, you can download
Forth code directly to CamelForth.  This lets you type new words from
the keyboard, test them as they are defined, and re-define them to make
changes.  Or you can edit an ASCII text file, and use a program such as
Procomm to send this file over the serial port to your 8086.  It can take
a few seconds to compile each line, so be sure to leave plenty of delay
after the line.  (I'm working on handshaking to improve this.)  Also be
sure that no line exceeds 80 characters.

2. If you you want to burn your program into PROM, you can add your code
to the file CAMEL86.ASM.  (I recommend creating a separate file and
using the INCLUDE directive.)  This requires you to convert your Forth
code to assembler code.  To show how this is done, every high-level
Forth word in the file is shown with its equivalent Forth code in a
comment.  Be especially careful with control structures (IF..ELSE..THEN,
BEGIN..UNTIL, DO..LOOP, and the like), and with the Forth word headers.
Reassemble CAMEL86.ASM and burn a PROM (or download to a PROM emulator
or debug monitor), then test.  This is a much slower process, and is
best saved for the final stage when you have a tested & debugged program
that you want to put in PROM.

                                 * * *

--------------------------- LICENSE TERMS ------------------------------
CamelForth for the Intel 8086 (c) 1996 Bradford J. Rodriguez.
Permission is granted to freely copy, modify, and distribute this
program for personal or educational use.  Commercial inquiries should be
directed to the author at 115 First St., #105, Collingwood, Ontario
L9Y 4W3 Canada
------------------------------------------------------------------------

Freely translated, this means: I'm keeping the copyright to this
program, but you're welcome to use it, change it, experiment with it,
give it to friends, build it into your projects, teach it to your
students -- anything EXCEPT make money from it.  If you want to sell
CamelForth, include it as part of something you're selling, or base a
product upon it, let's talk.  I'm reasonable.

               ========== THE COMPUTER JOURNAL ==========

CamelForth for the 6809, Z80, and 8051, and the ScroungeMaster II 6809
multiprocessor, have been extensively described in The Computer Journal,
a magazine I highly recommend.  A one-year subscription (6 issues) is
$24.00 in the U.S., and back issues are available for $5.25 each.  The
Computer Journal, P.O. Box 3900, Citrus Heights CA 95611-3900 USA,
telephone 916-722-4970, fax 916-722-7480, email tcj@psyber.com.

             ========= THE FORTH INTEREST GROUP ==========

If you are (or will be) a regular Forth user, a membership in the Forth
Interest Group "FIG" is invaluable.  Membership is $45/year in the U.S.,
and includes a subscription to the bimonthly magazine Forth Dimensions,
plus many other benefits.  FIG members may join the CamelForth email
list, fig-camel@forth.org.  Contact FIG at 100 Dolores St., Suite 183,
Carmel CA 93923 USA, telephone 408-373-6784, fax 408-373-2845, email
office@forth.org, or see FIG's web page http://www.forth.org/fig.html.

